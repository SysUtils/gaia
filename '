macro_rules! notification {
    ($name: ident $idname: ident { $($selector: literal = $variant: ident($data: ty)),* }) => {
        #[derive(Debug, Clone, Copy)]
        pub enum $name {
            $( $variant($data), )*
        }

        #[derive(Debug, Clone, Copy, TryFromPrimitive)]
        #[repr(u8)]
        pub enum $idname {
            $( $variant = $selector, )*
        }
    };

    ($name: ident $idname: ident { $($selector: literal = $variant: ident($data: ty)),* } $unknown: ident($unknowndata: ty)) => {
        #[derive(Debug, Clone, Copy)]
        pub enum $name {
            $( $variant($data), )*
            $unknown($unknowndata)
        }

        #[derive(Debug, Clone, Copy, TryFromPrimitive)]
        #[repr(u8)]
        pub enum $idname {
            $( $variant = $selector, )*
        }
    };
}

macro_rules! request {
    ($reqname: ident $respname: ident $idname: ident { $($selector: literal = $variant: ident($data: ty => $respdata: ty)),* }) => {
        #[derive(Debug, Clone)]
        pub enum $reqname {
            $( $variant($data), )*
        }

        #[derive(Debug, Clone)]
        pub enum $respname {
            $( $variant($respdata), )*
            Unknown { id: u8, data: std::vec::Vec<u8> }
        }

        #[repr(u8)]
        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, TryFromPrimitive)]
        pub enum $idname {
            $( $variant = $selector, )*
        }

        impl $reqname {
            pub fn command(&self) -> $idname {
                match self {
                    $($reqname::$variant(_) => $idname::$variant,)*
                }
            }
        }

        impl $respname {
            pub fn command(&self) -> u8 {
                match self {
                    $(Self::$variant(_) => $idname::$variant as _,)*
                    Self::Unknown { id, .. } => *id,
                }
            }
        }
    };
}
